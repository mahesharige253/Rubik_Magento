type Customer {
    mobilenumber: String @doc(description: "Customer Mobile Number")
    approval_status: String
    custom_attributes: [CustomAttributesOutput]
    business_license_file: String
    business_license_number: String
    tobacco_license_file: String
    tobacco_license_number: String
    deactivation_status: Boolean
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\DeactivationStatus"
        )
        @doc(description: "The Deactivation Status of the customer.")
    outlet_name: String
    outlet_id: String
    virtual_bank: VbaInfo
    is_parent_outlet: Boolean
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\ParentOutletData"
        )
        @doc(description: "The Parent Outlet Status of the customer.")
}

input BatCustomerInput {
    mobilenumber: String! @doc(description: "Customer Mobile Number")
    name: String!
    company_name: String!
    paper_forms: Int
    consent_identifier: String!
    business_license: [BusinessLicenseInput]
        @doc(description: "Business License Input")
    tobacco_seller_license: [TobaccoSellerLicenseInput]
        @doc(description: "Tobacco Seller License Input")
    virtual_bank: String!
    address: CustomerAddressInput
}

type CustomerStatusOutput {
    heading: String
    message: String
    call_center_number: String
    rejected_fields: String
}

type Mutation {
    setCustomerPinPassword(input: AddPinPassword!): PinPasswordOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\AddPinPassword"
        )
        @doc(description: "Pin and Password update")

    loginWithPinOrPassword(
        input: SetOutletIdPinOrPassword!
    ): CustomerLoginOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\LoginWithPinPassword"
        )
        @doc(description: "Login with Pin or Password and return token")

    createBatCustomer(input: BatCustomerInput!): CustomerOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\CreateCustomer"
        )
        @doc(description: "Create new customer")

    updateBatCustomer(input: BatCustomerUpdateInput): CustomerOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\UpdateCustomer"
        )
        @doc(description: "Update existing customer")

    updateAccountConsentInfo(input: ConsentIdentifier): AccountConsentOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\AccountInfoConsent"
        )
        @doc(description: "Update Account Info")

    changeCustomerPassword(
        currentPassword: String!
            @doc(description: "The customer's original password.")
        newPassword: String!
            @doc(description: "The customer's updated password.")
        currentPin: String! @doc(description: "The customer's original pin.")
        newPin: String! @doc(description: "The customer's updated pin.")
    ): Customer
        @resolver(
            class: "\\Magento\\CustomerGraphQl\\Model\\Resolver\\ChangePassword"
        )
        @doc(description: "Change the password for the logged-in customer.")

    deactivateCustomer(
        input: DeactivateCustomerInput!
    ): DeactivateCustomerOutput
        @resolver(
            class: "\\Bat\\CustomerGraphQl\\Model\\Resolver\\DeactivateCustomer"
        )
        @doc(description: "Deactivate customer")
}

input BatCustomerUpdateInput {
    outletId: String!
    mobilenumber: String! @doc(description: "Customer Mobile Number")
    name: String
    company_name: String
    paper_forms: Int
    consent_identifier: String
    business_license: [BusinessLicenseInput]
        @doc(description: "Business License Input")
    tobacco_seller_license: [TobaccoSellerLicenseInput]
        @doc(description: "Tobacco Seller License Input")
    virtual_bank: String
    address: CustomerAddressInput
}

input AddPinPassword {
    outletId: Int @doc(description: "Outlet Id")
    password: String @doc(description: "Password")
    confirmPassword: String @doc(description: "Password Confirm")
    pin: Int @doc(description: "Outlet Pin")
}

type PinPasswordOutput {
    success: Boolean
    message: String
}

input SetOutletIdPinOrPassword {
    outletId: Int @doc(description: "Outlet Id")
    password: String @doc(description: "Password")
    pin: Int @doc(description: "Pin")
}

type CustomerLoginOutput {
    token: String
    mobilenumber: String
}

type IsMobileAvailableOutput
    @doc(description: "Contains the result of the `isMobileAvailable` query.") {
    is_mobile_available: Boolean!
        @doc(
            description: "Indicates whether the specified mobile number can be used to create a customer."
        )
    message: String @doc(description: "Message to display in frontend.")
}

type isTokenValidOutput
    @doc(description: "Contains the result of the `isTokenValid` query.") {
    is_token_valid: Boolean
        @doc(description: "Indicates whether the specified token is valid for a customer or not.")
}

input BusinessLicenseInput {
    business_name: String @doc(description: "The file name include extensions")
    business_file: String @doc(description: "The  base64 code format's file")
}

input TobaccoSellerLicenseInput {
    tobacco_name: String @doc(description: "The file name include extensions")
    tobacco_file: String @doc(description: "The  base64 code format's file")
}

type Query {
    orderFrequency: OrderFrequencyOutput
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\OrderFrequency"
        )
        @doc(
            description: "The CustomerOrder Frequency Output will return the orderfrequency whether it is weekly,monthly or bi-weekly for particular customer as well as how many he can place."
        )

    getCustomerApplicationStatus(mobilenumber: String!): CustomerStatusOutput
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\GetCustomerStatus"
        )
        @doc(description: "Get Customer Status")
    isMobileAvailable(
        mobilenumber: String! @doc(description: "The mobile number to check.")
    ): IsMobileAvailableOutput
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\IsMobileAvailable"
        )
        @doc(
            description: "Check whether the specified mobile number has already been used to create a customer account."
        )

    paymentOverdue: PaymentOverdueOutput
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\PaymentOverdue"
        )
        @doc(
            description: "This API will check that any payment overdue or not."
        )

    remainingARLimit: RemainingARLimitOutput
        @resolver(
            class: "Bat\\CustomerGraphQl\\Model\\Resolver\\RemainingARLimit"
        )
        @doc(
            description: "This API will return remaining AR limit amount of specific customer."
        )

    getClosureAccountDetails: ClosureAccountDetailsOutput
        @resolver(class: "Bat\\CustomerGraphQl\\Model\\Resolver\\ClosureAccountDetail")
        @doc(
            description: "This API will return Closure Account Detail."
        )
        
    productCollection: ProductDataOutput
        @resolver(class: "Bat\\CustomerGraphQl\\Model\\Resolver\\ProductData")
        @doc(description: "Get Product collection of a store")

    isTokenValid : isTokenValidOutput
        @resolver(class: "Bat\\CustomerGraphQl\\Model\\Resolver\\IsTokenValid")
        @doc(description: "Check whether the specified token is valid or not.")
}

type RemainingARLimitOutput {
    customer_id: Int @doc(description: "Customer id of the login customer")
    total_ar_limit: Int @doc(description: "Total AR Limit")
    remaining_ar: Int @doc(description: "Remaining AR")
}

type PaymentOverdueOutput {
    customer_id: Int @doc(description: "Customer id of the login customer")
    message: String @doc(description: "Message for overdue as per status")
    status: Int @doc(description: "Overdue status")
    due_amount: Int @doc(description: "Overdue Amount")
    total_overpayment: Float @doc(description: "Total OverPayment Amount")
    minimum_payment: Float @doc(description: "Payable Amount")
    next_order_date: String @doc(description: "Next Order Date based on assigned order Frequency")
}

type OrderFrequencyOutput {
    cust_id: String @doc(description: "Customer id of the login customer")
    cust_name: String @doc(description: "Customer name of the login customer")
    order_placed: String
        @doc(
            description: "Total order placed based on order frequency of logged in customer"
        )
    order_frequency: String
        @doc(
            description: "Order frequency(Weekly = 0, Bi-weekly = 1, Monthly = 2) for login customer"
        )
    total_order: String
        @doc(
            description: "Total order limit for customer based on order frequency"
        )
    message: String
        @doc(
            description: "Message whether customer can able to place order or not"
        )
    success: Boolean @doc(description: "Returns true or false")
}

type CustomAttributesOutput {
    attribute_code: String
    value: String
}

input ConsentIdentifier {
    consent_identifier: String
}

type AccountConsentOutput {
    message: String
    success: Boolean
}

input DeactivateCustomerInput {
    bank_account_card: [BankAccountCardInput]
        @doc(description: "Bank Account Card Input")
    account_closing_date: String @doc(description: "Account Closing Date")
    returning_stock: Int @doc(description: "Return stock")
    consent_form: Int @doc(description: "Consent Form")
}

input BankAccountCardInput {
    card_name: String @doc(description: "The file name include extensions")
    card_file: String @doc(description: "The  base64 code format's file")
}

type DeactivateCustomerOutput {
    success: Int @doc(description: "Status")
    message: String @doc(description:"Response message after submitting deactivation form")
}

type ClosureAccountDetailsOutput {
    closure_status: String @doc(description: "Closure Status")
    status_message: String @doc(description: "Status Message")
    rejected_fields: String @doc(description: "Rejected Fields")
    rejected_reason: String @doc(description: "Rejected Reason")
}

type ProductDataOutput {
    items: [ProductInterface] @doc(description: "An array of products.")
}
